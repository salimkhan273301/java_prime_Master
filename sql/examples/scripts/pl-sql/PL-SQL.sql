--ALWAYS TURN THIS ON IF YOU WANT TO SEE SYSOUT
SET SERVEROUTPUT ON;

--CURSOR BY REFERENCE
CREATE OR REPLACE PROCEDURE EMPLOYEE_INFO(MY_CURSOR OUT SYS_REFCURSOR)
AS 
BEGIN
 OPEN MY_CURSOR FOR SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/

--ANONYMOUS STORED PROCEDURE
DECLARE
 EMPLOYEE_C SYS_REFCURSOR;
 FIRSTNAME VARCHAR2(100);
 LASTNAME VARCHAR2(100);
BEGIN
 EMPLOYEE_INFO(EMPLOYEE_C);
 LOOP
   --FILL OUT THE VARIABLES WE DECLARED
   FETCH EMPLOYEE_C INTO FIRSTNAME, LASTNAME;
   --STOP CONDITION
   EXIT WHEN EMPLOYEE_C%NOTFOUND;
   --TECHNICALLY A SYSOUT STATEMENT
   DBMS_OUTPUT.PUT_LINE(FIRSTNAME || ' ' || LASTNAME);
 END LOOP;
END;
/


--TRANSACTIONAL PROCEDURE
CREATE OR REPLACE PROCEDURE DELETE_INVOICE(INVID NUMBER)
AS 
BEGIN
 --FK TO INVOICE HAS NO CASCADE OPTION
 --NEED TO DELETE ALL INVOICELINE BEFORE ACTUAL INVOICE
 DELETE FROM INVOICELINE WHERE INVOICEID = INVID;
 
 --THEN WE DELETE ACTUAL INVOICE
 DELETE FROM INVOICE WHERE INVOICEID = INVID;
 
 --MAKE DELETION A TRANSACTION
 COMMIT;
END;
/

SELECT * FROM INVOICELINE WHERE INVOICEID = 137;

--TESTING INVOICE DELETION
EXEC DELETE_INVOICE(137);

ROLLBACK;

--FUNCTION THAT CALCULATES THE AVERAGE OF INVOICELINE
CREATE OR REPLACE FUNCTION INVOICELINE_AVG RETURN NUMBER
IS
--VARIABLE DECLARATIONS
AVERAGE NUMBER;
BEGIN
  SELECT SUM(UNITPRICE)/COUNT(UNITPRICE) INTO AVERAGE FROM INVOICELINE;
  RETURN AVERAGE;
END;
/

--TESTING INVOICELINE AVERAGE
SELECT INVOICELINE_AVG AS AVERAGE FROM DUAL;

--FUNCTION THAT RETURNS A CURSOR
CREATE OR REPLACE FUNCTION AFTER_1968 RETURN SYS_REFCURSOR
AS
  EMPLOYEE_C SYS_REFCURSOR;
BEGIN
 
  --REMEMBER THAT DATES ARE BIG NUMBERS
  --YOU CAN USE NUMBER OPERATORS TO COMPARE OR MANIPULATE THEM.
  OPEN EMPLOYEE_C FOR
  SELECT * FROM EMPLOYEE WHERE
  BIRTHDATE >= TO_DATE('01-01-1968','MM-DD-YYYY');
  
  RETURN EMPLOYEE_C;
END;
/

--TESTING AFTER 1968 EMPLOYEE'S
SELECT AFTER_1968 FROM DUAL;